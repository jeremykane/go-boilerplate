// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package init_module

import (
	"context"
	"github.com/google/wire"
	"github.com/jeremykane/go-boilerplate/internal/app/api"
	"github.com/jeremykane/go-boilerplate/internal/app/worker"
	"github.com/jeremykane/go-boilerplate/internal/config"
	"github.com/jeremykane/go-boilerplate/internal/repository"
	"github.com/jeremykane/go-boilerplate/internal/service"
	"net/http"
)

// Injectors from wire.go:

func NewAPI(ctx context.Context, cfg *config.Config, httpClient *http.Client) *APIWrapper {
	v := cfg.Database
	v2 := InitializeDB(v)
	facilityTypeRepoParam := repository.FacilityTypeRepoParam{
		DB: v2,
	}
	facilityTypeRepository := repository.NewFacilityTypeRepository(facilityTypeRepoParam)
	facilityTypeServiceParam := service.FacilityTypeServiceParam{
		FacilityTypeRepo: facilityTypeRepository,
	}
	facilityTypeService := service.NewFacilityTypeService(facilityTypeServiceParam)
	handlerParams := api.HandlerParams{
		FacilityTypeSvc: facilityTypeService,
	}
	handler := api.NewHandler(handlerParams)
	apiGracefulHandler := NewAPIGracefulHandler()
	apiWrapper := NewAPIWrapper(handler, apiGracefulHandler)
	return apiWrapper
}

func NewWorker(ctx context.Context, cfg *config.Config, httpClient *http.Client) *WorkerWrapper {
	v := cfg.Database
	v2 := InitializeDB(v)
	facilityTypeRepoParam := repository.FacilityTypeRepoParam{
		DB: v2,
	}
	facilityTypeRepository := repository.NewFacilityTypeRepository(facilityTypeRepoParam)
	facilityTypeServiceParam := service.FacilityTypeServiceParam{
		FacilityTypeRepo: facilityTypeRepository,
	}
	facilityTypeService := service.NewFacilityTypeService(facilityTypeServiceParam)
	workerParam := worker.WorkerParam{
		Config:          cfg,
		FacilityTypeSvc: facilityTypeService,
	}
	workerWorker := worker.NewWorker(workerParam)
	apiGracefulHandler := NewAPIGracefulHandler()
	workerWrapper := NewWorkerWrapper(workerWorker, apiGracefulHandler)
	return workerWrapper
}

// wire.go:

var (
	cfgSet = wire.NewSet(wire.FieldsOf(new(*config.Config), "Server"), wire.FieldsOf(new(*config.Config), "Database"), wire.FieldsOf(new(*config.Config), "SchedulerConfig"))

	dependencySet = wire.NewSet(
		InitializeDB,
	)

	repositorySet = wire.NewSet(repository.NewFacilityTypeRepository, wire.Struct(new(repository.FacilityTypeRepoParam), "*"))

	serviceSet = wire.NewSet(service.NewFacilityTypeService, wire.Struct(new(service.FacilityTypeServiceParam), "*"))

	appSet = wire.NewSet(wire.Struct(new(api.HandlerParams), "*"), api.NewHandler, wire.Struct(new(worker.WorkerParam), "*"), worker.NewWorker, NewAPIWrapper,
		NewWorkerWrapper,
		NewAPIGracefulHandler,
		NewWorkerGracefulHandler,
	)

	// List of all instances
	allSet = wire.NewSet(
		cfgSet,
		dependencySet,
		repositorySet,
		serviceSet,
		appSet,
	)
)
